// Code generated by sqlc. DO NOT EDIT.
// source: queue.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const dequeueJobs = `-- name: DequeueJobs :many
DELETE FROM queued_jobs
USING (
  SELECT id, queue_name, queued_at, scheduled_at, data, attempt
  FROM queued_jobs
  LIMIT $1
  FOR UPDATE SKIP LOCKED
) jobs
WHERE jobs.id = queued_jobs.id
AND queued_jobs.queue_name = $2
RETURNING queued_jobs.id, queued_jobs.queue_name, queued_jobs.queued_at, queued_jobs.scheduled_at, queued_jobs.data, queued_jobs.attempt
`

type DequeueJobsParams struct {
	Limit     int32
	QueueName string
}

func (q *Queries) DequeueJobs(ctx context.Context, arg DequeueJobsParams) ([]QueuedJob, error) {
	rows, err := q.db.Query(ctx, dequeueJobs, arg.Limit, arg.QueueName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueuedJob
	for rows.Next() {
		var i QueuedJob
		if err := rows.Scan(
			&i.ID,
			&i.QueueName,
			&i.QueuedAt,
			&i.ScheduledAt,
			&i.Data,
			&i.Attempt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const enqueueJob = `-- name: EnqueueJob :one
INSERT INTO queued_jobs (
  id,
  queue_name,
  queued_at,
  scheduled_at,
  data,
  attempt
) VALUES (
  uuid_generate_v4(),
  $1,
  NOW(),
  $2,
  $3,
  $4
)
RETURNING id
`

type EnqueueJobParams struct {
	QueueName   string
	ScheduledAt time.Time
	Data        []byte
	Attempt     int32
}

func (q *Queries) EnqueueJob(ctx context.Context, arg EnqueueJobParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, enqueueJob,
		arg.QueueName,
		arg.ScheduledAt,
		arg.Data,
		arg.Attempt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
